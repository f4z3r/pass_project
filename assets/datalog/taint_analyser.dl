// A taint analyser.

.type label
.number_type const
.type var
.type cond

// -- inputs --

// Assign output of `source()` to variable `x` at label `l`
.decl source(label: label, var: var)
// Call `sink()` with `x` as argument at label `l`
.decl sink(label: label, var:var)
// Label `l1` follows label `l2`
.decl follows(after: label, before: label)
// If condition `cond` at label `l1` holds then label `l2` follows label `l1`
.decl if(label: label, jump: label, condition: cond)
// Join labels `l2` and `l3` at `l1`
.decl join(label: label, join1: label, join2: label)
// Apply `op()` to variables `y` and `z` and store the result in `x` at label `l`
.decl opv(label: label, receiver: var, var1: var, var2: var)
// Apply `op()` to variable `y` and constant `c` and store the result in `x` at label `l`
.decl opc(label: label, receiver: var, var: var, const: const)
// Assign the variable/constant `y` to `x` at label `l`
.decl assign(label: label, receiver: var, var: var)


// -- facts --
.input source
.input sink
.input follows
.input if
.input join
.input opv
.input opc
.input assign

// -- analysis --

// ========================================
// PROGRAM FLOW
// ========================================
// `l1` occurs after `l2` in the control flow.
.decl after(after: label, before: label)
after(L1, L2) :- follows(L1, L2).
after(L1, L2) :- after(L1, L3), follows(L3, L2).

// ========================================
// TAINTED VARIABLES
// ========================================
// `x` is tainted at label `l`
.decl tainted(label: label, var: var)
tainted(L, X) :- source(L, X).
tainted(L, X) :- expl_depend(L, X, Y), tainted(L1, Y), after(L, L1).


// ========================================
// EXPLICIT DEPENDENCE
// ========================================
// `x` is explicitly dependent on `y`
.decl expl_depend(label: label, dependent: var, on: var)
// Reflexitivity
expl_depend(L, X, X) :- expl_depend(L, X, _).
expl_depend(L, X, X) :- expl_depend(L, _, X).
// Transitivity
expl_depend(L, X, Z) :- expl_depend(L, X, Y), expl_depend(L, Y, Z).
// Explicit dependence on operations
expl_depend(L, X, Y) :- opc(L, X, Y, _).
expl_depend(L, X, Y) :- opv(L, X, Y, _).
expl_depend(L, X, Y) :- opv(L, X, _, Y).
// Explicit dependence on assignment
expl_depend(L, X, Y) :- assign(L, X, Y).
expl_depend(L, X, X) :- source(L, X).

// Dependence carries over as long as there is not another assignment to the variable
expl_depend(L, X, Y) :- expl_depend(L1, X, Y), follows(L, L1), !assign(L, X, _), !assign(L, Y, _).

// ========================================
// IMPLICIT DEPENDENCE
// ========================================
.decl impl_depend(label: label, dependent: var, on: var)



// ========================================
// RESULT
// ========================================
.decl res(label: label, var: var)
res(L, X) :- tainted(L, X), sink(L, X).

.output res


